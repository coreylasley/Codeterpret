@using Codeterpret
@using Codeterpret.Implementations.BackEnd;
@using Codeterpret.SQL;
@using Codeterpret.Common;
@using Codeterpret.Interfaces;
@using Codeterpret.Implementations;
@using System.Linq;

@inject IJSRuntime JSRuntime


@if (SQLTables != null && SQLTables.Count > 0)
{
    <Fields>
        <Field>
            <FieldLabel><b>Backend Project Name</b></FieldLabel>
            <TextEdit @bind-Text="@BackEndProjectName"></TextEdit>
        </Field>
        <Field>
            <FieldLabel><b>Backend Project Type</b></FieldLabel>
            <Select @ref="BackendProjectType" TValue="Enums.BackEndProjectTypes" SelectedValueChanged="BackendProjectTypeChanged">
                @foreach (EnumDetail ed in backendProjectTypes)
                {
                    <SelectItem Value="@ed.Value">@ed.Description</SelectItem>
                }
            </Select>
        </Field>
    </Fields>

    <SettingsForm @ref="settingForm"></SettingsForm>

    <Label>Select the CRUD operations for each table that you wish to generate service methods for</Label>
    <Table Hoverable="true" Striped="true" Narrow="true">
        <TableHeader ThemeContrast="ThemeContrast.Dark">
            <TableRow>
                <TableHeaderCell>Table</TableHeaderCell>
                <TableHeaderCell>Create</TableHeaderCell>
                <TableHeaderCell>Read</TableHeaderCell>
                <TableHeaderCell>Update</TableHeaderCell>
                <TableHeaderCell>Delete</TableHeaderCell>
                <TableHeaderCell>Service Class Name <i>(Override above selection)</i></TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var t in SQLTables)
            {
                <TableRow>
                    <TableRowHeader>@t.Name</TableRowHeader>
                    <TableRowCell><Check TValue="bool" Checked="@t.GenerateCreate" @onchange="@(e => checkValueChanged(t.Name, Enums.CRUDTypes.Create))"></Check></TableRowCell>
                    <TableRowCell><Check TValue="bool" Checked="@t.GenerateRead" @onchange="@(e => checkValueChanged(t.Name, Enums.CRUDTypes.Read))"></Check></TableRowCell>
                    <TableRowCell><Check TValue="bool" Checked="@t.GenerateUpdate" @onchange="@(e => checkValueChanged(t.Name, Enums.CRUDTypes.Update))"></Check></TableRowCell>
                    <TableRowCell><Check TValue="bool" Checked="@t.GenerateDelete" @onchange="@(e => checkValueChanged(t.Name, Enums.CRUDTypes.Delete))"></Check></TableRowCell>
                    <TableRowCell><TextEdit Placeholder="@("i.e. " + t.Name + "Service")"></TextEdit></TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>

    <Fields>
        <Field>
            <Button Clicked="SelectAll" Color="Color.Light">Select All</Button>
        </Field>
        <Field>
            <Button Clicked="DeSelectAll" Color="Color.Light">De-Select All</Button>
        </Field>
        <Field>
            <Button Clicked="GenerateProject" Color="Color.Secondary">Generate Back-End Project</Button>
        </Field>
    </Fields>

    <br />
    <br />
}

<div id="backendCodePanel">
    <h3>@BackEndProjectName</h3>
    <div class="project-container">
               

        <div class="project-panel project-tree">

            @if (Items != null)
            {
                <TreeView @ref="ProjectTree" Nodes="Items"
                          TNode="ProjectItem"
                          GetChildNodes="@(item => item.Items)"
                          HasChildNodes="@(item => item.Items?.Any() == true)"
                          SelectedNodeChanged="@SelectedNodeChanged">
                    <NodeContent>@context.Name</NodeContent>
                </TreeView>
            }

        </div>

        <div class="project-panel project-code">
            <Field>
                <div class="file-label">@currentFile</div>
                <textarea rows="60" id="backendCode" name="backendCode" @bind="backendCode"></textarea>
            </Field>
        </div>

    </div>
</div>


@code {

    public List<SQLTable> SQLTables { get; set; }
    public string BackEndProjectName = "Test Project";

    private Select<Enums.BackEndProjectTypes> BackendProjectType;
    private Enums.ServiceOrganizationTypes ServiceOrganizationType;

    SettingsForm settingForm;

    List<EnumDetail> backendProjectTypes = new List<EnumDetail>();
    List<EnumDetail> frontendProjectTypes = new List<EnumDetail>();

    private IEnumerable<ProjectItem> Items;
    IList<ProjectItem> ExpandedNodes = new List<ProjectItem>();
    ProjectItem selectedNode;

    string backendCode;
    string currentFile;
    TreeView<ProjectItem> ProjectTree;
    bool showProjectPanel = false;

    Project Project = new Project(Enums.BackEndProjectTypes.CSharpNETCore31);


    protected override async Task OnInitializedAsync()
    {
        backendProjectTypes = Enums.GetBackEndProjectTypes();
        frontendProjectTypes = Enums.GetFrontEndProjectTypes();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeBackendCode();
        }
    }

    private void BackendProjectTypeChanged()
    {
        Project = new Project(BackendProjectType.SelectedValue);
        var settings = Project.CodeGenerator.SettingsDefinition;
        settingForm.LoadSettings(settings);
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    public async Task InitializeBackendCode()
    {
        try
        {
            await JSRuntime.InvokeAsync<object>("CodeMirrorBackendCode", "");
        }
        catch (Exception ex)
        {

        }
    }

    private async Task checkValueChanged(string tableName, Enums.CRUDTypes crudType)
    {
        foreach (var st in SQLTables.Where(x => x.Name == tableName))
        {
            switch (crudType)
            {
                case Enums.CRUDTypes.Create:
                    st.GenerateCreate = !st.GenerateCreate;
                    break;
                case Enums.CRUDTypes.Read:
                    st.GenerateRead = !st.GenerateRead;
                    break;
                case Enums.CRUDTypes.Update:
                    st.GenerateUpdate = !st.GenerateUpdate;
                    break;
                case Enums.CRUDTypes.Delete:
                    st.GenerateDelete = !st.GenerateDelete;
                    break;
            }
        }

        StateHasChanged();
    }

    private async Task GenerateProject()
    {
        Items = Project.CodeGenerator.GenerateProject(SQLTables, Enums.DatabaseTypes.SQLServer, BackEndProjectName.Replace(" ", ""), "", settingForm.settings);

        showProjectPanel = true;
        StateHasChanged();

        await JSRuntime.InvokeAsync<object>("ShowBackendCodePanel");
        await JSRuntime.InvokeVoidAsync("SetBackendCode", "");

    }

    private async Task SelectedNodeChanged(ProjectItem e)
    {
        currentFile = e.Name;
        await JSRuntime.InvokeVoidAsync("SetBackendCode", e.Code);
    }

    private void SelectAll()
    {
        foreach (var st in SQLTables)
        {
            st.GenerateCreate = true;
            st.GenerateRead = true;
            st.GenerateUpdate = true;
            st.GenerateDelete = true;
        }

        StateHasChanged();
    }

    private void DeSelectAll()
    {
        foreach (var st in SQLTables)
        {
            st.GenerateCreate = false;
            st.GenerateRead = false;
            st.GenerateUpdate = false;
            st.GenerateDelete = false;
        }

        StateHasChanged();
    }

}
