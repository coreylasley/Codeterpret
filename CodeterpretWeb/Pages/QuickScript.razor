@using Codeterpret
@using Codeterpret.Implementations;
@using Codeterpret.SQL;
@using Codeterpret.Common;

@page "/quickscript"

<h3>Database Schema Builder/Translator</h3>

<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Tab Name="source">Source Database</Tab>
        <Tab Name="targetSQL">Translated Database</Tab>
        <Tab Name="backendProject">Backend Project</Tab>
        <Tab Name="frontendProject">Frontend Project</Tab>
    </Items>
    <Content>
        <TabPanel Name="source">
            <br />
            <Field>
                <FieldLabel><b>Script Type</b></FieldLabel>
                <Select SelectedValue="@fromDBType" TValue="int" SelectedValueChanged="@OnFromDBTypeChanged">
                    <SelectItem Value="0">SQL Server</SelectItem>
                    <SelectItem Value="1">MySQL</SelectItem>
                    <SelectItem Value="2">Quick Script</SelectItem>
                </Select>
            </Field>

            <Alert @ref="fromDBTypeInfo" Color="Color.Info" Dismisable>
                
                @if (fromDBType == 2)
                {
                    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
                        Quick Script
                        <CloseButton Clicked="@hideFromDBTypeInfo" />
                    </Heading>
                    <Paragraph>
                        Quick Script is a shorthand script that I came up with, which allows the developer to very quickly define a database schema design, using abbreviated keywords to define table structures and relationships.

                    </Paragraph>
                    <Paragraph>
                        <Button Color="Color.Info" Clicked="(() => ShowMeExample(2))">Generate Example</Button>
                    </Paragraph>
                }

                @if (fromDBType == 0)
                {
                    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
                        SQL Server
                        <CloseButton Clicked="@hideFromDBTypeInfo" />
                    </Heading>
                    <Paragraph>
                        For best results, it is best to use schema creation script that has been generated from a tool such as SQL Server Management Studio.
                    </Paragraph>
                    <Paragraph>
                        <Button Color="Color.Info" Clicked="(() => ShowMeExample(0))">Generate Example</Button>
                    </Paragraph>
                }

                @if (fromDBType == 1)
                {
                    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
                        MySQL
                        <CloseButton Clicked="@hideFromDBTypeInfo" />
                    </Heading>
                    <Paragraph>
                        For best results, it is best to use schema creation script that has been generated from a tool such as MySQL Workbench.
                    </Paragraph>
                    <Paragraph>
                        <Button Color="Color.Info" Clicked="(() => ShowMeExample(1))">Generate Example</Button>
                    </Paragraph>
                }

            </Alert>

            <Field>
                <FieldLabel><b>Script</b></FieldLabel>
                <MemoEdit Rows="20" @bind-Text="fromScript"></MemoEdit>
            </Field>
        </TabPanel>
        <TabPanel Name="targetSQL">
            <br />
            <Field>
                <Label>Generate a database schema script from the <b>Source</b> script if you wish to translate to a different database type.</Label>
            </Field>
            <Fields>
                <Field>
                    <Select TValue="int" @bind-SelectedValue="toDBType">
                        <SelectItem Value="1">SQL Server</SelectItem>
                        <SelectItem Value="2">MySQL</SelectItem>
                    </Select>
                </Field>
                <Field>
                    <Button Color="Color.Primary" Clicked="@Generate">Generate</Button>
                </Field>
            </Fields>


            <Field>
                <FieldLabel><b>SQL Script</b></FieldLabel>
                <MemoEdit Rows="25" @bind-Text="generatedSQL"></MemoEdit>
            </Field>

        </TabPanel>
        <TabPanel Name="backendProject">
            <br />
            <Field>
                <Label>Generate a backend project from the sql script. <br /><br />Coming soon....</Label>
            </Field>
        </TabPanel>
        <TabPanel Name="frontendProject">
            <br />
            <Field>
                <Label>Generate a frontend project from the sql script. <br /><br />Coming soon....</Label>
            </Field>
        </TabPanel>
    </Content>
</Tabs>







@code {

    string selectedTab;
    Alert fromDBTypeInfo;

    private int fromDBType = 2;
    private int toDBType = 1;
    private string generatedSQL;

    private string infoScriptTitle = "Quick Script";
    private string fromScript = "";
    private string exampleQuickScript = "t Game\n" +
                                "c Id, an, pk\n" +
                                "c Title varchar 50\n" +
                                "c Description varchar 500\n" +
                                "c RatingId int, fk to Rating Id\n\n" +

                                "t Console\n" +
                                "c Id, an, pk\n" +
                                "c Name varchar 50\n" +
                                "c Description 500\n" +
                                "c ManufacturerId int, nn, fk to Manufacturer Id\n\n" +

                                "t Compatible\n" +
                                "c GameId int, nn, fk to Game Id\n" +
                                "c Console int, nn, fk to Console Id\n\n" +

                                "t Manufacturer\n" +
                                "c Id, an, pk\n" +
                                "c Name varchar 50\n" +
                                "c Description varchar 2000\n\n" +

                                "t Rating\n" +
                                "c Id, an, pk\n" +
                                "c Name varchar 10\n" +
                                "c Description varchar 200";

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selectedTab = "source";
            fromDBType = 2;
            fromDBTypeInfo.Show();
            StateHasChanged();
        }
    }


    private async Task Generate()
    {
        SQLTableClassBuilder stcb = new SQLTableClassBuilder(fromScript);
        CSharp cs = new CSharp();


        Common.DatabaseTypes dbType = Common.DatabaseTypes.SQLServer;
        if (toDBType == 2) dbType = Common.DatabaseTypes.MySQL;

        generatedSQL = cs.GenerateSQLScript(stcb.SQLTables, dbType);

        selectedTab = "targetSQL";

    }

    private async Task OnFromDBTypeChanged(int value)
    {
        fromDBType = value;
        StateHasChanged();
        fromDBTypeInfo.Show();
    }

    private void hideFromDBTypeInfo()
    {
        fromDBTypeInfo.Hide();
    }

    private void ShowMeExample(int dbTypeToShow)
    {
        SQLTableClassBuilder stcb = new SQLTableClassBuilder(exampleQuickScript);
        CSharp cs = new CSharp();

        fromScript = dbTypeToShow == 2 ? exampleQuickScript : cs.GenerateSQLScript(stcb.SQLTables, (Common.DatabaseTypes)dbTypeToShow);
    }

    public void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }
}
