@using Codeterpret
@using Codeterpret.Implementations;
@using Codeterpret.SQL;
@using Codeterpret.Common;

@inject IJSRuntime JSRuntime

@page "/builder"

<h2><b>Database Schema Translator and Project Builder</b></h2>

<Form>
    <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Tab Name="source">Source Database</Tab>
            <Tab Name="targetSQL">Translated Database</Tab>
            <Tab Name="backendProject">Backend Project</Tab>
            <Tab Name="frontendProject">Frontend Project</Tab>
        </Items>
        <Content>
            <TabPanel Name="source">
                <br />
                <Label>
                    Here you write or paste a schema creation script that you want translated to SQL Server or MySQL. You can convert a SQL Server schema creation script to MySQL and visa versa. You also have the option of writing a QuickScript which allows you to quickly define a schema that can be translated to SQL Server of MySQL. More database types will be made available as time permits me to write translating code.
                </Label>
                <Field>
                    <FieldLabel><b>Script Type</b></FieldLabel>
                    <Select SelectedValue="@fromDBType" TValue="int" SelectedValueChanged="@OnFromDBTypeChanged">
                        <SelectItem Value="0">SQL Server</SelectItem>
                        <SelectItem Value="1">MySQL</SelectItem>
                        <SelectItem Value="2">Quick Script</SelectItem>
                    </Select>
                </Field>

                <Alert @ref="fromDBTypeInfo" Color="Color.Info" Dismisable>

                    @if (fromDBType == 2)
                    {
                        <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
                            Quick Script
                            <CloseButton Clicked="@hideFromDBTypeInfo" />
                        </Heading>
                        <Paragraph>
                            Quick Script is a shorthand script that I came up with, which allows the developer to very quickly define a database schema design, using abbreviated keywords to define table structures and relationships.

                        </Paragraph>
                        <Paragraph>
                            <Button Color="Color.Info" Clicked="(() => ShowMeExample(2))">Generate Example</Button>
                        </Paragraph>
                    }

                    @if (fromDBType == 0)
                    {
                        <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
                            SQL Server
                            <CloseButton Clicked="@hideFromDBTypeInfo" />
                        </Heading>
                        <Paragraph>
                            For best results, it is best to use schema creation script that has been generated from a tool such as SQL Server Management Studio.
                        </Paragraph>
                        <Paragraph>
                            <Button Color="Color.Info" Clicked="(() => ShowMeExample(0))">Generate Example</Button>
                        </Paragraph>
                    }

                    @if (fromDBType == 1)
                    {
                        <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
                            MySQL
                            <CloseButton Clicked="@hideFromDBTypeInfo" />
                        </Heading>
                        <Paragraph>
                            For best results, it is best to use schema creation script that has been generated from a tool such as MySQL Workbench.
                        </Paragraph>
                        <Paragraph>
                            <Button Color="Color.Info" Clicked="(() => ShowMeExample(1))">Generate Example</Button>
                        </Paragraph>
                    }

                </Alert>

                <Field>
                    <FieldLabel><b>Script</b></FieldLabel>
                    <textarea id="fromSql" name="fromSql" @bind="fromScript"></textarea>
                </Field>
            </TabPanel>
            <TabPanel Name="targetSQL">
                <br />
                <Field>
                    <Label>Generate a database schema script from the <b>Source</b> script if you wish to translate to a different database type.</Label>
                </Field>
                <Fields>
                    <Field>
                        <Select TValue="int" @bind-SelectedValue="toDBType">
                            <SelectItem Value="1">SQL Server</SelectItem>
                            <SelectItem Value="2">MySQL</SelectItem>
                        </Select>
                    </Field>
                    <Field>
                        <Button Color="Color.Primary" Clicked="@Generate">Generate</Button>
                    </Field>
                </Fields>

                @if (initializedToSql)
                {
                <Field>
                    <FieldLabel><b>SQL Script</b></FieldLabel>
                    <textarea id="toSql" name="toSql" @bind="generatedSQL"></textarea>
                </Field>
                }


            </TabPanel>
            <TabPanel Name="backendProject">
                <br />
                <Field>
                    <Label><b>Coming soon:</b> Generate a backend project from the sql script. Currently a .NET Core 3.1 Web API with Dapper is being developed.</Label>
                </Field>
            </TabPanel>
            <TabPanel Name="frontendProject">
                <br />
                <Field>
                    <Label><b>Coming soon:</b> Generate a frontend project from the sql script. Currently an Angular 10+ translator is being developed.</Label>
                </Field>
            </TabPanel>
        </Content>
    </Tabs>
</Form>



@code {

    string selectedTab;
    Alert fromDBTypeInfo;

    private int fromDBType = 2;
    private int toDBType = 1;
    private string generatedSQL;
    private bool initializedToSql = false;
        
    private string fromScript = "";
    private string exampleQuickScript = "t Game\n" +
                                "c Id, an, pk\n" +
                                "c Title varchar 50\n" +
                                "c Description varchar 500\n" +
                                "c RatingId int, fk to Rating Id\n\n" +

                                "t Console\n" +
                                "c Id, an, pk\n" +
                                "c Name varchar 50\n" +
                                "c Description 500\n" +
                                "c ManufacturerId int, nn, fk to Manufacturer Id\n\n" +

                                "t Compatible\n" +
                                "c GameId int, nn, fk to Game Id\n" +
                                "c Console int, nn, fk to Console Id\n\n" +

                                "t Manufacturer\n" +
                                "c Id, an, pk\n" +
                                "c Name varchar 50\n" +
                                "c Description varchar 2000\n\n" +

                                "t Rating\n" +
                                "c Id, an, pk\n" +
                                "c Name varchar 10\n" +
                                "c Description varchar 200";


    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selectedTab = "source";
            fromDBType = 2;
            fromDBTypeInfo.Show();
            StateHasChanged();

            await SetupCodeMirror("", "");
        }
    }

    private async Task SetupCodeMirror(string fromCode, string toCode)
    {
        await JSRuntime.InvokeAsync<object>("CodeMirrorFromSql", fromCode);     
    }

    private async Task<string> GetFromCode()
    {
        return await JSRuntime.InvokeAsync<string>("GetFromSqlCode");
    }

    private async Task SetFromSqlCode(string code)
    {        
        await JSRuntime.InvokeVoidAsync("SetFromSqlCode", code);        
    }

    private async Task SetToSqlCode(string code)
    {        
        await JSRuntime.InvokeVoidAsync("SetToSqlCode", code);        
    }


    private async Task Generate()
    {
        fromScript = await GetFromCode();
        SQLTableClassBuilder stcb = new SQLTableClassBuilder(fromScript);
        CSharp cs = new CSharp();

        if (!initializedToSql)
        {
            initializedToSql = true;

            StateHasChanged();
            await JSRuntime.InvokeAsync<object>("CodeMirrorToSql", "");
        }

        Common.DatabaseTypes dbType = Common.DatabaseTypes.SQLServer;
        if (toDBType == 2) dbType = Common.DatabaseTypes.MySQL;

        generatedSQL = cs.GenerateSQLScript(stcb.SQLTables, dbType);
        await SetToSqlCode(generatedSQL);

        selectedTab = "targetSQL";

    }

    private void OnFromDBTypeChanged(int value)
    {
        fromDBType = value;
        StateHasChanged();
        fromDBTypeInfo.Show();
    }

    private void hideFromDBTypeInfo()
    {
        fromDBTypeInfo.Hide();
    }

    private async Task ShowMeExample(int dbTypeToShow)
    {
        SQLTableClassBuilder stcb = new SQLTableClassBuilder(exampleQuickScript);
        CSharp cs = new CSharp();

        fromScript = dbTypeToShow == 2 ? exampleQuickScript : cs.GenerateSQLScript(stcb.SQLTables, (Common.DatabaseTypes)dbTypeToShow);
        await SetFromSqlCode(fromScript);
    }

    public async Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;
        StateHasChanged();
        await OnSelectedPanelChanged();

    }

    public async Task OnSelectedPanelChanged()
    {
        if (selectedTab == "targetSQL" && !initializedToSql)
        {

        }
    }
}
